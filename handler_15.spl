//shutdown

//mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = INT_SHUTDOWN;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * PAGE_SIZE - 1;

//if current process is not shell or current user is not root
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
if(R2 != SHELL_PROCESS || [PROCESS_TABLE + 16*R2 + 3] != ROOT) then
	[([PTBR + 2 * ((userSP-1)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-1) % PAGE_SIZE)] = -1;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = 0;
	SP = userSP;
	ireturn;
endif;

//let the second core finish any critical operations
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;

//disable the second core
reset;

R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;

//kill all processes except login, init and idle
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];			//will not kill this process
call PROCESS_MANAGER;


alias bufferIndex R1;
bufferIndex = 0;
while(bufferIndex < MAX_BUFFER) do
	if([BUFFER_TABLE + 4*bufferIndex + 1] == 1) then
		multipush(R1);
		R3 = BUFFER_BASE + bufferIndex;
		R4 = [BUFFER_TABLE + 4*bufferIndex];
		R1 = DISK_STORE;
		R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
		call DEVICE_MANAGER;
		multipop(R1);
	endif;
	bufferIndex = bufferIndex + 1;
endwhile;


R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

//write the memory inode table + user table to disk 
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;

//write the memory root file to disk 
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;

//write the memory disk free list to disk 
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;


halt;