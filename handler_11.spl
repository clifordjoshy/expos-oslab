//wait, signal, getpid, getppid

alias systemCallNum R0;
systemCallNum = [([PTBR + 2 * ((SP-5)/PAGE_SIZE)] * PAGE_SIZE) + ((SP-5) % PAGE_SIZE)];

//mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = systemCallNum;

alias userSP R1;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * PAGE_SIZE - 1;

alias returnValue R11;
returnValue = 0;

if(systemCallNum == INT_WAIT) then
	alias pidToWait R2;
	pidToWait = [([PTBR + 2 * ((userSP-4)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-4) % PAGE_SIZE)];
	
	multipush(R1);
	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;

	if(
		pidToWait == [SYSTEM_STATUS_TABLE + 5*CORE + 1] || 
		[PROCESS_TABLE + 16*pidToWait + 4] == TERMINATED || 
		pidToWait < 0 || pidToWait >= MAX_PROC_NUM
	) then
		returnValue = -1;
	endif;

	multipush(R2);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R2);
	multipop(R1);

	if(returnValue == -1) then
		goto return_to_user;
	endif;

	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 4] = WAIT_PROCESS;
	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 5] = pidToWait;

	multipush(R0, R1);
	call CONTEXT_SWITCH;
	multipop(R0, R1);
	returnValue = 0;
	goto return_to_user;
endif;


if(systemCallNum == INT_SIGNAL) then
	alias procId R2;
	procId = 0;

	multipush(R1);
	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;

	while (procId < MAX_PROC_NUM) do
		if([PROCESS_TABLE + 16*procId + 4] == WAIT_PROCESS && [PROCESS_TABLE + 16*procId + 5] == [SYSTEM_STATUS_TABLE + 5*CORE + 1]) then
			[PROCESS_TABLE + 16*procId + 4] = READY;		
		endif;
		procId = procId + 1;
	endwhile;

	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R1);

	returnValue = 0;
	goto return_to_user;
endif;


if(systemCallNum == INT_GETPID) then
	returnValue = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
	goto return_to_user;
endif;


if(systemCallNum == INT_GETPPID) then
	returnValue = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 2];
	goto return_to_user;
endif;


return_to_user:
[([PTBR + 2*((userSP-1)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-1) % PAGE_SIZE)] = returnValue;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = 0;
SP = userSP;
ireturn;