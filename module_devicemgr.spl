//module 4
alias functionNum R1;
alias currentPID R2;

if(functionNum == TERMINAL_WRITE) then
	alias word R3;

	multipush(R1, R2, R3);
	R1 = ACQUIRE_TERMINAL;
	//R2 already contains pid
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	
	print word;

	multipush(R1, R2, R3);
	R1 = RELEASE_TERMINAL;
	//R2 already contains pid
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);

	//return value is present in R0 (use if needed)
	return;
endif;


if(functionNum == TERMINAL_READ) then
	alias wordAddressPhysical R3;
	
	multipush(R1, R2, R3);
	R1 = ACQUIRE_TERMINAL;
	//R2 already contains pid
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	
	read;

	[PROCESS_TABLE + 16*currentPID + 4] = WAIT_TERMINAL;
	
	multipush(R1, R2, R3);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;

	call CONTEXT_SWITCH;
	
	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R1, R2, R3);

	//after receiving input
	[wordAddressPhysical] = [PROCESS_TABLE + 16*currentPID + 8];

	return;
endif;


if(functionNum == DISK_LOAD) then
	alias pageNumber R3;
	alias blockNumber R4;

	multipush(R1, R2, R3, R4);
	R1 = ACQUIRE_DISK;
	//R2 contains PID
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 1] = 0;		// load/store bit
	[DISK_STATUS_TABLE + 2] = pageNumber;
	[DISK_STATUS_TABLE + 3] = blockNumber;

	load(pageNumber, blockNumber);
	
	[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;

	multipush(R1, R2, R3, R4);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;
	
	call CONTEXT_SWITCH;
	
	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R1, R2, R3, R4);

	return;
endif;


if(functionNum == DISK_STORE) then
	alias pageNumber R3;
	alias blockNumber R4;

	multipush(R1, R2, R3, R4);
	R1 = ACQUIRE_DISK;
	//R2 contains pid
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 1] = 1;		//store operation
	[DISK_STATUS_TABLE + 2] = pageNumber;
	[DISK_STATUS_TABLE + 3] = blockNumber;

	store(pageNumber, blockNumber);

	[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
	multipush(R1, R2, R3, R4);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;

	call CONTEXT_SWITCH;

	R1 = ACQUIRE_KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R1, R2, R3, R4);
	
	return;
endif;