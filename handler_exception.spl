//Set the MODE FLAG field in the process table to -1
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = -1;
//update user sp
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;
// Switch to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512 - 1;

backup;

multipush(EIP);
alias currentPID R8;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

//if not page fault exception or no more space in the user stack
if(EC != 0 || [PROCESS_TABLE + 16*currentPID + 13] == PTLR*PAGE_SIZE-1) then
	print "Exception";
	if(EC == 1) then
		print "Ilgal Instruction";
	endif;
	if(EC == 2) then
		print "Ilgal Memory Access";
		print EMA;
	endif;
	print EIP;
	print "Exiting Proc";
	breakpoint;
	R1 = EXIT_PROCESS;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	call CONTEXT_SWITCH;
endif;


R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;

//exception is from a code page
if(EPN >= 4 && EPN <= 7) then
	multipush(R8);
	R1 = GET_CODE_PAGE;
	R2 = [DISK_MAP_TABLE + 10*currentPID + EPN];
	call MEMORY_MANAGER;
	multipop(R8);
	[PAGE_TABLE_BASE + 20*currentPID + EPN*2] = R0;
	[PAGE_TABLE_BASE + 20*currentPID + EPN*2 + 1] = "1100";
endif;

//heap page
if(EPN == 2 || EPN == 3) then
	multipush(R8);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R8);
	[PAGE_TABLE_BASE + 20*currentPID + 4] = R0; 
	[PAGE_TABLE_BASE + 20*currentPID + 5] = "1110"; 
	multipush(R8);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R8);
	[PAGE_TABLE_BASE + 20*currentPID + 6] = R0; 
	[PAGE_TABLE_BASE + 20*currentPID + 7] = "1110"; 
endif;

R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

multipop(EIP);

restore;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];
SP = SP + 1;
[([PTBR + 2*(SP/PAGE_SIZE)] * PAGE_SIZE) + (SP%PAGE_SIZE)] = EIP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 9] = 0;				//mode flag

ireturn;
