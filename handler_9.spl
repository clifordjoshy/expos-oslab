//exec system call

//Set the MODE FLAG field in the process table to the system call number which is 9 for exec system call.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = INT_EXEC;
alias userSP R0;
userSP = SP;

//set uptr for process to sp
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;

// Setting SP to top of uareapage  [kernel stack]
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * PAGE_SIZE - 1;

alias fileName R1;
alias returnValPhysical R2;

fileName = [([PTBR + 2 * ((userSP-4)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-4) % PAGE_SIZE)];

alias inodeTableIndex R3;
alias inodeTableEntry R4;
inodeTableIndex = 0;

while(inodeTableIndex < MAX_FILE_NUM) do
	inodeTableEntry = INODE_TABLE + 16*inodeTableIndex;
	if([inodeTableEntry] == EXEC && [inodeTableEntry+1] == fileName) then
		break;
	endif;
	inodeTableIndex = inodeTableIndex + 1;
endwhile;

//file not found
if (inodeTableIndex == MAX_FILE_NUM) then
	[([PTBR + 2 * ((userSP-1)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-1) % PAGE_SIZE)] = -1;
	SP = userSP;
	//reset mode flag to 0
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = 0;
	ireturn;
endif;

multipush(R3, R4);
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
call PROCESS_MANAGER;
multipop(R3, R4);

alias userAreaPage R5;
userAreaPage = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11];

//per process resource table
alias procResTableInd R6;
procResTableInd = 0;
while(procResTableInd < 8) do
	[(userAreaPage*PAGE_SIZE) + RESOURCE_TABLE_OFFSET + (procResTableInd*2)] = -1;
	procResTableInd = procResTableInd + 1;
endwhile;

//reclaim user area page of previous process
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; 		//decrement MEM_FREE_COUNT

//set details for new process
SP = userAreaPage*PAGE_SIZE - 1;
//new process will use same pid
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 4] = RUNNING;
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 7] = inodeTableIndex;		//INODE INDEX

//setup page table
alias pageTableEntry R6;
pageTableEntry = PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 5*CORE + 1];

//Library
[pageTableEntry+0] = 63;
[pageTableEntry+1] = "0100";
[pageTableEntry+2] = 64;
[pageTableEntry+3] = "0100";

//Heap [Lazily Allocated]
[pageTableEntry+4] = -1;
[pageTableEntry+5] = "0000";
[pageTableEntry+6] = -1;
[pageTableEntry+7] = "0000";

multipush(R4);
R1 = GET_FREE_PAGE;
//Stack
multipush(R6);
call MEMORY_MANAGER;
multipop(R6);
[pageTableEntry+16] = R0;
[pageTableEntry+17] = "0110";

multipush(R6);
call MEMORY_MANAGER;
multipop(R6);
[pageTableEntry+18] = R0;
[pageTableEntry+19] = "0110";

multipop(R4);

//Code
multipush(R4, R6);
R1 = GET_CODE_PAGE;
R2 = [inodeTableEntry + 8];
call MEMORY_MANAGER;
multipop(R4, R6);

[pageTableEntry+8] = R0;
[pageTableEntry+9] = "0110";

//rest of the pages will be lazy loaded
[pageTableEntry + 10] = -1;
[pageTableEntry + 11] = "0000";
[pageTableEntry + 12] = -1;
[pageTableEntry + 13] = "0000";
[pageTableEntry + 14] = -1;
[pageTableEntry + 15] = "0000";

//initialise disk map table
alias diskMapTableEntry R7;
diskMapTableEntry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*10;
[diskMapTableEntry + 2] = -1;
[diskMapTableEntry + 3] = -1;
[diskMapTableEntry + 4] = [inodeTableEntry + 8];
[diskMapTableEntry + 5] = [inodeTableEntry + 9];
[diskMapTableEntry + 6] = [inodeTableEntry + 10];
[diskMapTableEntry + 7] = [inodeTableEntry + 11];
[diskMapTableEntry + 8] = -1;
[diskMapTableEntry + 9] = -1;


//entry point
[[pageTableEntry+16] * PAGE_SIZE] = [[pageTableEntry+8]*PAGE_SIZE + 1];
SP = 8*PAGE_SIZE;

//reset mode flag to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16 + 9] = 0;
ireturn;