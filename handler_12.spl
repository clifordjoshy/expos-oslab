//logout
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = INT_LOGOUT;		//MODE flag

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;

// kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * PAGE_SIZE - 1;

alias returnValue R11;

if([SYSTEM_STATUS_TABLE + 5*CORE + 1] != SHELL_PROCESS) then
	[([PTBR + 2*((userSP-1)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-1) % PAGE_SIZE)] = returnValue;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = 0;			//reset mode flag
	SP = userSP;
	ireturn;
endif;

//set logout process and call context switch so that core2 schedules idle
[SYSTEM_STATUS_TABLE + 7] = 1;
[PROCESS_TABLE + 16*SHELL_PROCESS + 4] = READY;		//set state to ready so that this process can be rescheduled.
call CONTEXT_SWITCH;

R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;

R1 = KILL_ALL;
R2 = SHELL_PROCESS;
call PROCESS_MANAGER;

R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

[SYSTEM_STATUS_TABLE + 7] = 0;

[PROCESS_TABLE + 16*SHELL_PROCESS + 4] = TERMINATED;

alias shellStackPage R0;
shellStackPage = [PAGE_TABLE_BASE + 20*SHELL_PROCESS + 16];
alias shellCodePage R1;
shellCodePage = [PAGE_TABLE_BASE + 20*SHELL_PROCESS + 8];
//entry point for shell is reset
[shellStackPage*PAGE_SIZE] = [shellCodePage*PAGE_SIZE + 1];

[PROCESS_TABLE + 16*SHELL_PROCESS + 13] = 8*PAGE_SIZE;		//reset user stack pointer

[PROCESS_TABLE + 16*LOGIN_PROCESS + 4] = READY;

[SYSTEM_STATUS_TABLE] = KERNEL;				//current user id is set to 0(kernel)

call CONTEXT_SWITCH;