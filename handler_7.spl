//write (console/file)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_WRITE;		//MODE flag

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * PAGE_SIZE - 1;

alias fileDescriptor R1;
fileDescriptor=[([PTBR + 2 * ((userSP-4)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-4) % PAGE_SIZE)];

alias writeWord R2;
writeWord = [([PTBR + 2 * ((userSP-3)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-3) % PAGE_SIZE)];

alias returnValue R11;

if(fileDescriptor == -2) then
	multipush(R0, R1, R2);
	R1 = TERMINAL_WRITE;
	R3 = writeWord;	//from R2
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call DEVICE_MANAGER;
	multipop(R0, R1, R2);

	returnValue = 0;
	goto return_to_user;

else
	alias resTable R3;
	resTable = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11] * PAGE_SIZE + RESOURCE_TABLE_OFFSET;
	
	if(fileDescriptor < 0 || fileDescriptor > 7 || [resTable + 2*fileDescriptor] != FILE) then
		returnValue = -1;
		goto return_to_user;
	endif;

	alias openTableEntry R4;
	openTableEntry = OPEN_FILE_TABLE + 4*[resTable + 2*fileDescriptor + 1];

	alias inodeIndex R5;
	inodeIndex = [openTableEntry];

	alias inodeEntry R6;
	inodeEntry = INODE_TABLE + 16*inodeIndex;

	alias currentUser R7;
	currentUser = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 3];

	//if current user is not root and not owner and exclusive permission is set
	if(currentUser != ROOT && [inodeEntry + 3] != currentUser && [inodeEntry + 4] == EXCLUSIVE) then
		returnValue = -3;
		goto return_to_user;
	endif;
	
	multipush(R0, R1, R2, R3, R4, R5, R6);
	R1 = ACQUIRE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call RESOURCE_MANAGER;
	returnValue = R0;
	multipop(R0, R1, R2, R3, R4, R5, R6);
	if(returnValue == -1) then
		goto return_to_user;
	endif;
	
	alias lSeek R7;
	lSeek = [openTableEntry + 2];
	
	if(lSeek == MAX_FILE_SIZE) then
		returnValue = -2;
		goto release_inode_return;
	endif;
	
	alias diskBlock R8;

	//if lseek is at the beginning of a new page and equal to file size
	if(lSeek%PAGE_SIZE == 0 && lSeek == [inodeEntry + 2]) then
		//allocate new block
		multipush(R0, R1, R2, R3, R4, R5, R6, R7);
		R1 = GET_FREE_BLOCK;
		call MEMORY_MANAGER;
		diskBlock = R0;
		multipop(R0, R1, R2, R3, R4, R5, R6, R7);

		if(diskBlock == -1) then
			returnValue = -2;
			goto release_inode_return;
		endif;
		
		[inodeEntry + 8 + (lSeek/PAGE_SIZE)] = diskBlock;
	else
		diskBlock = [inodeEntry + 8 + (lSeek/PAGE_SIZE)];
	endif;

	multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
	R1 = BUFFERED_WRITE;
	R4 = writeWord;		//from R2
	R2 = diskBlock;
	R3 = lSeek%PAGE_SIZE;
	call FILE_MANAGER;
	multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);


	//if lseek equals file size, increment file size in inode and root file
	if(lSeek == [inodeEntry + 2]) then
		[inodeEntry + 2] = lSeek + 1;
		[ROOT_FILE + 8*inodeIndex + 1] = lSeek + 1;
	endif;

	//increment lseek
	[openTableEntry + 2] = [openTableEntry + 2] + 1;

	release_inode_return:
	multipush(R0, R11);
	R1 = RELEASE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call RESOURCE_MANAGER;
	multipop(R0, R11);
	goto return_to_user;
endif;


return_to_user:
[([PTBR + 2*((userSP-1)/PAGE_SIZE)] * PAGE_SIZE) + ((userSP-1) % PAGE_SIZE)] = returnValue;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;			//reset mode flag
SP = userSP;
ireturn;